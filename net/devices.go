package net

import (
	"fmt"
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/google/gopacket/pcap"
	"log"
	"net"
	"strings"
	"time"
)

// –ù–∞–π—Ç–∏ Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func getWirelessInterface() (string, error) {
	interfaces, err := pcap.FindAllDevs()
	if err != nil {
		return "", err
	}

	for _, iface := range interfaces {
		desc := strings.ToLower(iface.Description)
		if strings.Contains(desc, "wireless") || strings.Contains(desc, "wi-fi") || strings.Contains(desc, "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å") {
			return iface.Name, nil
		}
	}
	return "", fmt.Errorf("–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ ARP-–∑–∞–ø—Ä–æ—Å–æ–≤
func sendARPRequests(handle *pcap.Handle, iface net.Interface) error {
	// –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏ –º–∞—Å–∫—É –ø–æ–¥—Å–µ—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	addrs, err := iface.Addrs()
	if err != nil {
		return err
	}

	var ipnet *net.IPNet
	for _, addr := range addrs {
		if ipnet = addr.(*net.IPNet); ipnet.IP.To4() != nil {
			break
		}
	}
	if ipnet == nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IPv4-–∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
	}

	// –°–æ–∑–¥–∞–µ–º ARP-–ø–∞–∫–µ—Ç
	eth := layers.Ethernet{
		SrcMAC:       iface.HardwareAddr,
		DstMAC:       net.HardwareAddr{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // Broadcast
		EthernetType: layers.EthernetTypeARP,
	}
	arp := layers.ARP{
		AddrType:          layers.LinkTypeEthernet,
		Protocol:          layers.EthernetTypeIPv4,
		HwAddressSize:     6,
		ProtAddressSize:   4,
		Operation:         layers.ARPRequest,
		SourceHwAddress:   []byte(iface.HardwareAddr),
		SourceProtAddress: []byte(ipnet.IP.To4()),
		DstHwAddress:      []byte{0, 0, 0, 0, 0, 0},
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ARP-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å–µ IP-–∞–¥—Ä–µ—Å–∞ –≤ –ø–æ–¥—Å–µ—Ç–∏
	buf := gopacket.NewSerializeBuffer()
	opts := gopacket.SerializeOptions{}
	for ip := ipnet.IP.Mask(ipnet.Mask); ipnet.Contains(ip); inc(ip) {
		arp.DstProtAddress = []byte(ip)
		gopacket.SerializeLayers(buf, opts, &eth, &arp)
		if err := handle.WritePacketData(buf.Bytes()); err != nil {
			return err
		}
	}

	return nil
}

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º IP-–∞–¥—Ä–µ—Å –Ω–∞ 1
func inc(ip net.IP) {
	for j := len(ip) - 1; j >= 0; j-- {
		ip[j]++
		if ip[j] > 0 {
			break
		}
	}
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–π—Ç–æ–≤
func ipToString(ip []byte) string {
	return net.IP(ip).String()
}

// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ (ARP-–æ—Ç–≤–µ—Ç—ã)
func ScanDevices() {
	ifaceName, err := getWirelessInterface()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞: %v", err)
	}
	fmt.Printf("–ò–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: %s\n", ifaceName)

	handle, err := pcap.OpenLive(ifaceName, 1600, true, pcap.BlockForever)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: %v", err)
	}
	defer handle.Close()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–µ–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ARP-–∑–∞–ø—Ä–æ—Å—ã
	if err := sendARPRequests(handle, *iface); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ARP-–∑–∞–ø—Ä–æ—Å–æ–≤: %v", err)
	}

	packetSource := gopacket.NewPacketSource(handle, handle.LinkType())

	fmt.Println("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ (–æ–∂–∏–¥–∞–Ω–∏–µ ARP-–æ—Ç–≤–µ—Ç–æ–≤)...\n")
	fmt.Println(" IP-–∞–¥—Ä–µ—Å        | MAC-–∞–¥—Ä–µ—Å")
	fmt.Println("-----------------|----------------------")

	// –°–ª—É—à–∞–µ–º ARP-–æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
	timeout := time.After(5 * time.Second)
	for {
		select {
		case packet := <-packetSource.Packets():
			arpLayer := packet.Layer(layers.LayerTypeARP)
			if arpLayer != nil {
				arpPacket, _ := arpLayer.(*layers.ARP)
				fmt.Printf(" %-15s | %02X:%02X:%02X:%02X:%02X:%02X\n",
					ipToString(arpPacket.SourceProtAddress), // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ IP
					arpPacket.SourceHwAddress[0], arpPacket.SourceHwAddress[1], arpPacket.SourceHwAddress[2],
					arpPacket.SourceHwAddress[3], arpPacket.SourceHwAddress[4], arpPacket.SourceHwAddress[5])
			}
		case <-timeout:
			fmt.Println("\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
			return
		}
	}
}
